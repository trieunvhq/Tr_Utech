///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Logs'
// Generated by LLBLGen v1.3.5996.26197 Final on: Thursday, January 6, 2022, 12:16:22 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Logs'.
	/// </summary>
	public class PrLogs : PrDBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		m_daDate;
			private SqlInt32		m_iId;
			private SqlString		m_sMy_view, m_sUsername, m_sFuntion, m_sException;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PrLogs()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		///		 <LI>daDate. May be SqlDateTime.Null</LI>
		///		 <LI>sFuntion. May be SqlString.Null</LI>
		///		 <LI>sException. May be SqlString.Null</LI>
		///		 <LI>sMy_view. May be SqlString.Null</LI>
		///		 <LI>sUsername. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public bool Insert(int id_, DateTime date_, string funtion_, string _Ex, string _View, string _userName)
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[LogLogs_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id_));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dadate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, date_));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sfuntion", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, funtion_));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sexception", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _Ex));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@smy_view", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _View));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@susername", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _userName));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLogs::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		///		 <LI>daDate. May be SqlDateTime.Null</LI>
		///		 <LI>sFuntion. May be SqlString.Null</LI>
		///		 <LI>sException. May be SqlString.Null</LI>
		///		 <LI>sMy_view. May be SqlString.Null</LI>
		///		 <LI>sUsername. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[LogLogs_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iId));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dadate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sfuntion", SqlDbType.VarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sFuntion));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sexception", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sException));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@smy_view", SqlDbType.VarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMy_view));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@susername", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUsername));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLogs::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[LogLogs_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iId));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLogs::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iId</LI>
		/// </UL>
		///		 <LI>iId</LI>
		///		 <LI>daDate</LI>
		///		 <LI>sFuntion</LI>
		///		 <LI>sException</LI>
		///		 <LI>sMy_view</LI>
		///		 <LI>sUsername</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[LogLogs_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Logs");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iid", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iId));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iId = (Int32)dtToReturn.Rows[0]["id"];
					m_daDate = dtToReturn.Rows[0]["date"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["date"];
					m_sFuntion = dtToReturn.Rows[0]["funtion"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["funtion"];
					m_sException = dtToReturn.Rows[0]["exception"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["exception"];
					m_sMy_view = dtToReturn.Rows[0]["my_view"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["my_view"];
					m_sUsername = dtToReturn.Rows[0]["username"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["username"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLogs::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[LogLogs_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Logs");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsLogs::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iId
		{
			get
			{
				return m_iId;
			}
			set
			{
				SqlInt32 iIdTmp = (SqlInt32)value;
				if(iIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iId", "iId can't be NULL");
				}
				m_iId = value;
			}
		}


		public SqlDateTime daDate
		{
			get
			{
				return m_daDate;
			}
			set
			{
				SqlDateTime daDateTmp = (SqlDateTime)value;
				if(daDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daDate", "daDate can't be NULL");
				}
				m_daDate = value;
			}
		}


		public SqlString sFuntion
		{
			get
			{
				return m_sFuntion;
			}
			set
			{
				SqlString sFuntionTmp = (SqlString)value;
				if(sFuntionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sFuntion", "sFuntion can't be NULL");
				}
				m_sFuntion = value;
			}
		}


		public SqlString sException
		{
			get
			{
				return m_sException;
			}
			set
			{
				SqlString sExceptionTmp = (SqlString)value;
				if(sExceptionTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sException", "sException can't be NULL");
				}
				m_sException = value;
			}
		}


		public SqlString sMy_view
		{
			get
			{
				return m_sMy_view;
			}
			set
			{
				SqlString sMy_viewTmp = (SqlString)value;
				if(sMy_viewTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sMy_view", "sMy_view can't be NULL");
				}
				m_sMy_view = value;
			}
		}


		public SqlString sUsername
		{
			get
			{
				return m_sUsername;
			}
			set
			{
				SqlString sUsernameTmp = (SqlString)value;
				if(sUsernameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUsername", "sUsername can't be NULL");
				}
				m_sUsername = value;
			}
		}
		#endregion
	}
}
