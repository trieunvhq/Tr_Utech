///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TransactionHistory'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, December 28, 2021, 9:39:21 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'TransactionHistory'.
	/// </summary>
	public class PrTransactionHistory : PrDBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt64		m_lID;
			private SqlString		m_sRecordStatus, m_sWarehouseType_To, m_sWarehouseType_From;
			private SqlDateTime		m_daEXT_MfDate, m_daUpdateDate, m_daEXT_ExpDate, m_daOrderDate, m_daCreateDate, m_daEXT_RecDate;
			private SqlDecimal		m_dcQuantity;
			private SqlString		m_sCustomerCode, m_sCustomerName, m_sSupplierCode, m_sWarehouseCode_From, m_sLocationName_From, m_sEXT_QRCode, m_sUserCreate, m_sTransactionType, m_sUserUpdate, m_sSupplierName, m_sLocationCode_From, m_sOrderNo, m_sWarehouseName_From, m_sItemCode, m_sItemName, m_sItemType, m_sWarehouseCode_To, m_sWarehouseName_To, m_sLocationName_To, m_sEXT_Serial, m_sEXT_PartNo, m_sEXT_LotNo, m_sLocationCode_To, m_sUnit, m_sEXT_OtherCode;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PrTransactionHistory()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sTransactionType</LI>
		///		 <LI>sOrderNo. May be SqlString.Null</LI>
		///		 <LI>daOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sLocationCode_From. May be SqlString.Null</LI>
		///		 <LI>sLocationName_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseCode_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseName_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseType_From. May be SqlString.Null</LI>
		///		 <LI>sLocationCode_To. May be SqlString.Null</LI>
		///		 <LI>sLocationName_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseCode_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseName_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseType_To. May be SqlString.Null</LI>
		///		 <LI>sItemCode. May be SqlString.Null</LI>
		///		 <LI>sItemName. May be SqlString.Null</LI>
		///		 <LI>sItemType. May be SqlString.Null</LI>
		///		 <LI>dcQuantity. May be SqlDecimal.Null</LI>
		///		 <LI>sUnit. May be SqlString.Null</LI>
		///		 <LI>sEXT_OtherCode. May be SqlString.Null</LI>
		///		 <LI>sEXT_Serial. May be SqlString.Null</LI>
		///		 <LI>sEXT_PartNo. May be SqlString.Null</LI>
		///		 <LI>sEXT_LotNo. May be SqlString.Null</LI>
		///		 <LI>daEXT_MfDate. May be SqlDateTime.Null</LI>
		///		 <LI>daEXT_RecDate. May be SqlDateTime.Null</LI>
		///		 <LI>daEXT_ExpDate. May be SqlDateTime.Null</LI>
		///		 <LI>sEXT_QRCode. May be SqlString.Null</LI>
		///		 <LI>sCustomerCode. May be SqlString.Null</LI>
		///		 <LI>sCustomerName. May be SqlString.Null</LI>
		///		 <LI>sSupplierCode. May be SqlString.Null</LI>
		///		 <LI>sSupplierName. May be SqlString.Null</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>lID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[TransactionHistory_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTransactionType", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTransactionType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daOrderDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode_From", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName_From", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseCode_From", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseCode_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseName_From", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseName_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseType_From", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseType_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode_To", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName_To", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseCode_To", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseCode_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseName_To", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseName_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseType_To", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseType_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemType", SqlDbType.NVarChar, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 3, "", DataRowVersion.Proposed, m_dcQuantity));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUnit", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUnit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_OtherCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_OtherCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_Serial", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_Serial));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_PartNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_PartNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_LotNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_LotNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_MfDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_MfDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_RecDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_RecDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_ExpDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_ExpDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_QRCode", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_QRCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@lID", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, m_lID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_lID = (SqlInt64)scmCmdToExecute.Parameters["@lID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrTransactionHistory::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>lID</LI>
		///		 <LI>sTransactionType</LI>
		///		 <LI>sOrderNo. May be SqlString.Null</LI>
		///		 <LI>daOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sLocationCode_From. May be SqlString.Null</LI>
		///		 <LI>sLocationName_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseCode_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseName_From. May be SqlString.Null</LI>
		///		 <LI>sWarehouseType_From. May be SqlString.Null</LI>
		///		 <LI>sLocationCode_To. May be SqlString.Null</LI>
		///		 <LI>sLocationName_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseCode_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseName_To. May be SqlString.Null</LI>
		///		 <LI>sWarehouseType_To. May be SqlString.Null</LI>
		///		 <LI>sItemCode. May be SqlString.Null</LI>
		///		 <LI>sItemName. May be SqlString.Null</LI>
		///		 <LI>sItemType. May be SqlString.Null</LI>
		///		 <LI>dcQuantity. May be SqlDecimal.Null</LI>
		///		 <LI>sUnit. May be SqlString.Null</LI>
		///		 <LI>sEXT_OtherCode. May be SqlString.Null</LI>
		///		 <LI>sEXT_Serial. May be SqlString.Null</LI>
		///		 <LI>sEXT_PartNo. May be SqlString.Null</LI>
		///		 <LI>sEXT_LotNo. May be SqlString.Null</LI>
		///		 <LI>daEXT_MfDate. May be SqlDateTime.Null</LI>
		///		 <LI>daEXT_RecDate. May be SqlDateTime.Null</LI>
		///		 <LI>daEXT_ExpDate. May be SqlDateTime.Null</LI>
		///		 <LI>sEXT_QRCode. May be SqlString.Null</LI>
		///		 <LI>sCustomerCode. May be SqlString.Null</LI>
		///		 <LI>sCustomerName. May be SqlString.Null</LI>
		///		 <LI>sSupplierCode. May be SqlString.Null</LI>
		///		 <LI>sSupplierName. May be SqlString.Null</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[TransactionHistory_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@lID", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, m_lID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTransactionType", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTransactionType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daOrderDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode_From", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName_From", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseCode_From", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseCode_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseName_From", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseName_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseType_From", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseType_From));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode_To", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName_To", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseCode_To", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseCode_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseName_To", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseName_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sWarehouseType_To", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sWarehouseType_To));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemType", SqlDbType.NVarChar, 2, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 3, "", DataRowVersion.Proposed, m_dcQuantity));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUnit", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUnit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_OtherCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_OtherCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_Serial", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_Serial));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_PartNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_PartNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_LotNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_LotNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_MfDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_MfDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_RecDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_RecDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daEXT_ExpDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daEXT_ExpDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sEXT_QRCode", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sEXT_QRCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sCustomerName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sCustomerName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrTransactionHistory::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>lID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[TransactionHistory_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@lID", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, m_lID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrTransactionHistory::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>lID</LI>
		/// </UL>
		///		 <LI>lID</LI>
		///		 <LI>sTransactionType</LI>
		///		 <LI>sOrderNo</LI>
		///		 <LI>daOrderDate</LI>
		///		 <LI>sLocationCode_From</LI>
		///		 <LI>sLocationName_From</LI>
		///		 <LI>sWarehouseCode_From</LI>
		///		 <LI>sWarehouseName_From</LI>
		///		 <LI>sWarehouseType_From</LI>
		///		 <LI>sLocationCode_To</LI>
		///		 <LI>sLocationName_To</LI>
		///		 <LI>sWarehouseCode_To</LI>
		///		 <LI>sWarehouseName_To</LI>
		///		 <LI>sWarehouseType_To</LI>
		///		 <LI>sItemCode</LI>
		///		 <LI>sItemName</LI>
		///		 <LI>sItemType</LI>
		///		 <LI>dcQuantity</LI>
		///		 <LI>sUnit</LI>
		///		 <LI>sEXT_OtherCode</LI>
		///		 <LI>sEXT_Serial</LI>
		///		 <LI>sEXT_PartNo</LI>
		///		 <LI>sEXT_LotNo</LI>
		///		 <LI>daEXT_MfDate</LI>
		///		 <LI>daEXT_RecDate</LI>
		///		 <LI>daEXT_ExpDate</LI>
		///		 <LI>sEXT_QRCode</LI>
		///		 <LI>sCustomerCode</LI>
		///		 <LI>sCustomerName</LI>
		///		 <LI>sSupplierCode</LI>
		///		 <LI>sSupplierName</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate</LI>
		///		 <LI>sUserCreate</LI>
		///		 <LI>daUpdateDate</LI>
		///		 <LI>sUserUpdate</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[TransactionHistory_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("TransactionHistory");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@lID", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, m_lID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_lID = (Int64)dtToReturn.Rows[0]["ID"];
					m_sTransactionType = (string)dtToReturn.Rows[0]["TransactionType"];
					m_sOrderNo = dtToReturn.Rows[0]["OrderNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["OrderNo"];
					m_daOrderDate = dtToReturn.Rows[0]["OrderDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["OrderDate"];
					m_sLocationCode_From = dtToReturn.Rows[0]["LocationCode_From"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationCode_From"];
					m_sLocationName_From = dtToReturn.Rows[0]["LocationName_From"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationName_From"];
					m_sWarehouseCode_From = dtToReturn.Rows[0]["WarehouseCode_From"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseCode_From"];
					m_sWarehouseName_From = dtToReturn.Rows[0]["WarehouseName_From"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseName_From"];
					m_sWarehouseType_From = dtToReturn.Rows[0]["WarehouseType_From"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseType_From"];
					m_sLocationCode_To = dtToReturn.Rows[0]["LocationCode_To"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationCode_To"];
					m_sLocationName_To = dtToReturn.Rows[0]["LocationName_To"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationName_To"];
					m_sWarehouseCode_To = dtToReturn.Rows[0]["WarehouseCode_To"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseCode_To"];
					m_sWarehouseName_To = dtToReturn.Rows[0]["WarehouseName_To"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseName_To"];
					m_sWarehouseType_To = dtToReturn.Rows[0]["WarehouseType_To"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["WarehouseType_To"];
					m_sItemCode = dtToReturn.Rows[0]["ItemCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ItemCode"];
					m_sItemName = dtToReturn.Rows[0]["ItemName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ItemName"];
					m_sItemType = dtToReturn.Rows[0]["ItemType"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ItemType"];
					m_dcQuantity = dtToReturn.Rows[0]["Quantity"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["Quantity"];
					m_sUnit = dtToReturn.Rows[0]["Unit"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Unit"];
					m_sEXT_OtherCode = dtToReturn.Rows[0]["EXT_OtherCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["EXT_OtherCode"];
					m_sEXT_Serial = dtToReturn.Rows[0]["EXT_Serial"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["EXT_Serial"];
					m_sEXT_PartNo = dtToReturn.Rows[0]["EXT_PartNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["EXT_PartNo"];
					m_sEXT_LotNo = dtToReturn.Rows[0]["EXT_LotNo"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["EXT_LotNo"];
					m_daEXT_MfDate = dtToReturn.Rows[0]["EXT_MfDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["EXT_MfDate"];
					m_daEXT_RecDate = dtToReturn.Rows[0]["EXT_RecDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["EXT_RecDate"];
					m_daEXT_ExpDate = dtToReturn.Rows[0]["EXT_ExpDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["EXT_ExpDate"];
					m_sEXT_QRCode = dtToReturn.Rows[0]["EXT_QRCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["EXT_QRCode"];
					m_sCustomerCode = dtToReturn.Rows[0]["CustomerCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CustomerCode"];
					m_sCustomerName = dtToReturn.Rows[0]["CustomerName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["CustomerName"];
					m_sSupplierCode = dtToReturn.Rows[0]["SupplierCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SupplierCode"];
					m_sSupplierName = dtToReturn.Rows[0]["SupplierName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SupplierName"];
					m_sRecordStatus = (string)dtToReturn.Rows[0]["RecordStatus"];
					m_daCreateDate = dtToReturn.Rows[0]["CreateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["CreateDate"];
					m_sUserCreate = dtToReturn.Rows[0]["UserCreate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserCreate"];
					m_daUpdateDate = dtToReturn.Rows[0]["UpdateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["UpdateDate"];
					m_sUserUpdate = dtToReturn.Rows[0]["UserUpdate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserUpdate"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrTransactionHistory::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[TransactionHistory_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("TransactionHistory");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrTransactionHistory::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt64 lID
		{
			get
			{
				return m_lID;
			}
			set
			{
				SqlInt64 lIDTmp = (SqlInt64)value;
				if(lIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("lID", "lID can't be NULL");
				}
				m_lID = value;
			}
		}


		public SqlString sTransactionType
		{
			get
			{
				return m_sTransactionType;
			}
			set
			{
				SqlString sTransactionTypeTmp = (SqlString)value;
				if(sTransactionTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sTransactionType", "sTransactionType can't be NULL");
				}
				m_sTransactionType = value;
			}
		}


		public SqlString sOrderNo
		{
			get
			{
				return m_sOrderNo;
			}
			set
			{
				SqlString sOrderNoTmp = (SqlString)value;
				if(sOrderNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sOrderNo", "sOrderNo can't be NULL");
				}
				m_sOrderNo = value;
			}
		}


		public SqlDateTime daOrderDate
		{
			get
			{
				return m_daOrderDate;
			}
			set
			{
				SqlDateTime daOrderDateTmp = (SqlDateTime)value;
				if(daOrderDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daOrderDate", "daOrderDate can't be NULL");
				}
				m_daOrderDate = value;
			}
		}


		public SqlString sLocationCode_From
		{
			get
			{
				return m_sLocationCode_From;
			}
			set
			{
				SqlString sLocationCode_FromTmp = (SqlString)value;
				if(sLocationCode_FromTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationCode_From", "sLocationCode_From can't be NULL");
				}
				m_sLocationCode_From = value;
			}
		}


		public SqlString sLocationName_From
		{
			get
			{
				return m_sLocationName_From;
			}
			set
			{
				SqlString sLocationName_FromTmp = (SqlString)value;
				if(sLocationName_FromTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationName_From", "sLocationName_From can't be NULL");
				}
				m_sLocationName_From = value;
			}
		}


		public SqlString sWarehouseCode_From
		{
			get
			{
				return m_sWarehouseCode_From;
			}
			set
			{
				SqlString sWarehouseCode_FromTmp = (SqlString)value;
				if(sWarehouseCode_FromTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseCode_From", "sWarehouseCode_From can't be NULL");
				}
				m_sWarehouseCode_From = value;
			}
		}


		public SqlString sWarehouseName_From
		{
			get
			{
				return m_sWarehouseName_From;
			}
			set
			{
				SqlString sWarehouseName_FromTmp = (SqlString)value;
				if(sWarehouseName_FromTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseName_From", "sWarehouseName_From can't be NULL");
				}
				m_sWarehouseName_From = value;
			}
		}


		public SqlString sWarehouseType_From
		{
			get
			{
				return m_sWarehouseType_From;
			}
			set
			{
				SqlString sWarehouseType_FromTmp = (SqlString)value;
				if(sWarehouseType_FromTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseType_From", "sWarehouseType_From can't be NULL");
				}
				m_sWarehouseType_From = value;
			}
		}


		public SqlString sLocationCode_To
		{
			get
			{
				return m_sLocationCode_To;
			}
			set
			{
				SqlString sLocationCode_ToTmp = (SqlString)value;
				if(sLocationCode_ToTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationCode_To", "sLocationCode_To can't be NULL");
				}
				m_sLocationCode_To = value;
			}
		}


		public SqlString sLocationName_To
		{
			get
			{
				return m_sLocationName_To;
			}
			set
			{
				SqlString sLocationName_ToTmp = (SqlString)value;
				if(sLocationName_ToTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationName_To", "sLocationName_To can't be NULL");
				}
				m_sLocationName_To = value;
			}
		}


		public SqlString sWarehouseCode_To
		{
			get
			{
				return m_sWarehouseCode_To;
			}
			set
			{
				SqlString sWarehouseCode_ToTmp = (SqlString)value;
				if(sWarehouseCode_ToTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseCode_To", "sWarehouseCode_To can't be NULL");
				}
				m_sWarehouseCode_To = value;
			}
		}


		public SqlString sWarehouseName_To
		{
			get
			{
				return m_sWarehouseName_To;
			}
			set
			{
				SqlString sWarehouseName_ToTmp = (SqlString)value;
				if(sWarehouseName_ToTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseName_To", "sWarehouseName_To can't be NULL");
				}
				m_sWarehouseName_To = value;
			}
		}


		public SqlString sWarehouseType_To
		{
			get
			{
				return m_sWarehouseType_To;
			}
			set
			{
				SqlString sWarehouseType_ToTmp = (SqlString)value;
				if(sWarehouseType_ToTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sWarehouseType_To", "sWarehouseType_To can't be NULL");
				}
				m_sWarehouseType_To = value;
			}
		}


		public SqlString sItemCode
		{
			get
			{
				return m_sItemCode;
			}
			set
			{
				SqlString sItemCodeTmp = (SqlString)value;
				if(sItemCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemCode", "sItemCode can't be NULL");
				}
				m_sItemCode = value;
			}
		}


		public SqlString sItemName
		{
			get
			{
				return m_sItemName;
			}
			set
			{
				SqlString sItemNameTmp = (SqlString)value;
				if(sItemNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemName", "sItemName can't be NULL");
				}
				m_sItemName = value;
			}
		}


		public SqlString sItemType
		{
			get
			{
				return m_sItemType;
			}
			set
			{
				SqlString sItemTypeTmp = (SqlString)value;
				if(sItemTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemType", "sItemType can't be NULL");
				}
				m_sItemType = value;
			}
		}


		public SqlDecimal dcQuantity
		{
			get
			{
				return m_dcQuantity;
			}
			set
			{
				SqlDecimal dcQuantityTmp = (SqlDecimal)value;
				if(dcQuantityTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcQuantity", "dcQuantity can't be NULL");
				}
				m_dcQuantity = value;
			}
		}


		public SqlString sUnit
		{
			get
			{
				return m_sUnit;
			}
			set
			{
				SqlString sUnitTmp = (SqlString)value;
				if(sUnitTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUnit", "sUnit can't be NULL");
				}
				m_sUnit = value;
			}
		}


		public SqlString sEXT_OtherCode
		{
			get
			{
				return m_sEXT_OtherCode;
			}
			set
			{
				SqlString sEXT_OtherCodeTmp = (SqlString)value;
				if(sEXT_OtherCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sEXT_OtherCode", "sEXT_OtherCode can't be NULL");
				}
				m_sEXT_OtherCode = value;
			}
		}


		public SqlString sEXT_Serial
		{
			get
			{
				return m_sEXT_Serial;
			}
			set
			{
				SqlString sEXT_SerialTmp = (SqlString)value;
				if(sEXT_SerialTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sEXT_Serial", "sEXT_Serial can't be NULL");
				}
				m_sEXT_Serial = value;
			}
		}


		public SqlString sEXT_PartNo
		{
			get
			{
				return m_sEXT_PartNo;
			}
			set
			{
				SqlString sEXT_PartNoTmp = (SqlString)value;
				if(sEXT_PartNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sEXT_PartNo", "sEXT_PartNo can't be NULL");
				}
				m_sEXT_PartNo = value;
			}
		}


		public SqlString sEXT_LotNo
		{
			get
			{
				return m_sEXT_LotNo;
			}
			set
			{
				SqlString sEXT_LotNoTmp = (SqlString)value;
				if(sEXT_LotNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sEXT_LotNo", "sEXT_LotNo can't be NULL");
				}
				m_sEXT_LotNo = value;
			}
		}


		public SqlDateTime daEXT_MfDate
		{
			get
			{
				return m_daEXT_MfDate;
			}
			set
			{
				SqlDateTime daEXT_MfDateTmp = (SqlDateTime)value;
				if(daEXT_MfDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daEXT_MfDate", "daEXT_MfDate can't be NULL");
				}
				m_daEXT_MfDate = value;
			}
		}


		public SqlDateTime daEXT_RecDate
		{
			get
			{
				return m_daEXT_RecDate;
			}
			set
			{
				SqlDateTime daEXT_RecDateTmp = (SqlDateTime)value;
				if(daEXT_RecDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daEXT_RecDate", "daEXT_RecDate can't be NULL");
				}
				m_daEXT_RecDate = value;
			}
		}


		public SqlDateTime daEXT_ExpDate
		{
			get
			{
				return m_daEXT_ExpDate;
			}
			set
			{
				SqlDateTime daEXT_ExpDateTmp = (SqlDateTime)value;
				if(daEXT_ExpDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daEXT_ExpDate", "daEXT_ExpDate can't be NULL");
				}
				m_daEXT_ExpDate = value;
			}
		}


		public SqlString sEXT_QRCode
		{
			get
			{
				return m_sEXT_QRCode;
			}
			set
			{
				SqlString sEXT_QRCodeTmp = (SqlString)value;
				if(sEXT_QRCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sEXT_QRCode", "sEXT_QRCode can't be NULL");
				}
				m_sEXT_QRCode = value;
			}
		}


		public SqlString sCustomerCode
		{
			get
			{
				return m_sCustomerCode;
			}
			set
			{
				SqlString sCustomerCodeTmp = (SqlString)value;
				if(sCustomerCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sCustomerCode", "sCustomerCode can't be NULL");
				}
				m_sCustomerCode = value;
			}
		}


		public SqlString sCustomerName
		{
			get
			{
				return m_sCustomerName;
			}
			set
			{
				SqlString sCustomerNameTmp = (SqlString)value;
				if(sCustomerNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sCustomerName", "sCustomerName can't be NULL");
				}
				m_sCustomerName = value;
			}
		}


		public SqlString sSupplierCode
		{
			get
			{
				return m_sSupplierCode;
			}
			set
			{
				SqlString sSupplierCodeTmp = (SqlString)value;
				if(sSupplierCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sSupplierCode", "sSupplierCode can't be NULL");
				}
				m_sSupplierCode = value;
			}
		}


		public SqlString sSupplierName
		{
			get
			{
				return m_sSupplierName;
			}
			set
			{
				SqlString sSupplierNameTmp = (SqlString)value;
				if(sSupplierNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sSupplierName", "sSupplierName can't be NULL");
				}
				m_sSupplierName = value;
			}
		}


		public SqlString sRecordStatus
		{
			get
			{
				return m_sRecordStatus;
			}
			set
			{
				m_sRecordStatus = value;
			}
		}


		public SqlDateTime daCreateDate
		{
			get
			{
				return m_daCreateDate;
			}
			set
			{
				SqlDateTime daCreateDateTmp = (SqlDateTime)value;
				if(daCreateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daCreateDate", "daCreateDate can't be NULL");
				}
				m_daCreateDate = value;
			}
		}


		public SqlString sUserCreate
		{
			get
			{
				return m_sUserCreate;
			}
			set
			{
				SqlString sUserCreateTmp = (SqlString)value;
				if(sUserCreateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserCreate", "sUserCreate can't be NULL");
				}
				m_sUserCreate = value;
			}
		}


		public SqlDateTime daUpdateDate
		{
			get
			{
				return m_daUpdateDate;
			}
			set
			{
				SqlDateTime daUpdateDateTmp = (SqlDateTime)value;
				if(daUpdateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daUpdateDate", "daUpdateDate can't be NULL");
				}
				m_daUpdateDate = value;
			}
		}


		public SqlString sUserUpdate
		{
			get
			{
				return m_sUserUpdate;
			}
			set
			{
				SqlString sUserUpdateTmp = (SqlString)value;
				if(sUserUpdateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserUpdate", "sUserUpdate can't be NULL");
				}
				m_sUserUpdate = value;
			}
		}
		#endregion
	}
}
