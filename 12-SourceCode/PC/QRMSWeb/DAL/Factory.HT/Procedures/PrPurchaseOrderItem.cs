///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PurchaseOrderItem'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, December 28, 2021, 9:39:21 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PurchaseOrderItem'.
	/// </summary>
	public class PrPurchaseOrderItem : PrDBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sInputStatus, m_sPrintStatus;
			private SqlDateTime		m_daUpdateDate, m_daCreateDate, m_daPurchaseOrderDate;
			private SqlDecimal		m_dcQuantity;
			private SqlInt32		m_iID, m_iPurchaseOrderID;
			private SqlString		m_sSupplierName, m_sUserUpdate, m_sUserCreate, m_sRecordStatus, m_sItemName, m_sItemType, m_sPurchaseOrderNo, m_sItemCode, m_sLocationName, m_sSupplierCode, m_sUnit, m_sLocationCode;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PrPurchaseOrderItem()
		{
			// Nothing for now.
		}

		public DataTable GetPurchaseOrderItem_MHDC(int id)
		{
			SqlCommand scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[GetPurchaseOrderItem_MHDC]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PurchaseOrderItem");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, id));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch (Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::GetPurchaseOrderItem_MHDC::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}
		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iPurchaseOrderID</LI>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sItemCode</LI>
		///		 <LI>sItemName. May be SqlString.Null</LI>
		///		 <LI>sItemType</LI>
		///		 <LI>dcQuantity</LI>
		///		 <LI>sUnit. May be SqlString.Null</LI>
		///		 <LI>sLocationCode. May be SqlString.Null</LI>
		///		 <LI>sLocationName. May be SqlString.Null</LI>
		///		 <LI>sSupplierCode. May be SqlString.Null</LI>
		///		 <LI>sSupplierName. May be SqlString.Null</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrderItem_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iPurchaseOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iPurchaseOrderID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPurchaseOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPurchaseOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daPurchaseOrderDate", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daPurchaseOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemType", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 3, "", DataRowVersion.Proposed, m_dcQuantity));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUnit", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUnit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInputStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInputStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPrintStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPrintStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID = (SqlInt32)scmCmdToExecute.Parameters["@iID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		///		 <LI>iPurchaseOrderID</LI>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sItemCode</LI>
		///		 <LI>sItemName. May be SqlString.Null</LI>
		///		 <LI>sItemType</LI>
		///		 <LI>dcQuantity</LI>
		///		 <LI>sUnit. May be SqlString.Null</LI>
		///		 <LI>sLocationCode. May be SqlString.Null</LI>
		///		 <LI>sLocationName. May be SqlString.Null</LI>
		///		 <LI>sSupplierCode. May be SqlString.Null</LI>
		///		 <LI>sSupplierName. May be SqlString.Null</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrderItem_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iPurchaseOrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iPurchaseOrderID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPurchaseOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPurchaseOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daPurchaseOrderDate", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daPurchaseOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sItemType", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sItemType));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcQuantity", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 3, "", DataRowVersion.Proposed, m_dcQuantity));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUnit", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUnit));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLocationName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLocationName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierCode));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSupplierName", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSupplierName));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInputStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInputStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPrintStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPrintStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrderItem_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		///		 <LI>iID</LI>
		///		 <LI>iPurchaseOrderID</LI>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate</LI>
		///		 <LI>sItemCode</LI>
		///		 <LI>sItemName</LI>
		///		 <LI>sItemType</LI>
		///		 <LI>dcQuantity</LI>
		///		 <LI>sUnit</LI>
		///		 <LI>sLocationCode</LI>
		///		 <LI>sLocationName</LI>
		///		 <LI>sSupplierCode</LI>
		///		 <LI>sSupplierName</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate</LI>
		///		 <LI>sUserCreate</LI>
		///		 <LI>daUpdateDate</LI>
		///		 <LI>sUserUpdate</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrderItem_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PurchaseOrderItem");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID = (Int32)dtToReturn.Rows[0]["ID"];
					m_iPurchaseOrderID = (Int32)dtToReturn.Rows[0]["PurchaseOrderID"];
					m_sPurchaseOrderNo = (string)dtToReturn.Rows[0]["PurchaseOrderNo"];
					m_daPurchaseOrderDate = dtToReturn.Rows[0]["PurchaseOrderDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["PurchaseOrderDate"];
					m_sItemCode = (string)dtToReturn.Rows[0]["ItemCode"];
					m_sItemName = dtToReturn.Rows[0]["ItemName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["ItemName"];
					m_sItemType = (string)dtToReturn.Rows[0]["ItemType"];
					m_dcQuantity = (Decimal)dtToReturn.Rows[0]["Quantity"];
					m_sUnit = dtToReturn.Rows[0]["Unit"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["Unit"];
					m_sLocationCode = dtToReturn.Rows[0]["LocationCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationCode"];
					m_sLocationName = dtToReturn.Rows[0]["LocationName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["LocationName"];
					m_sSupplierCode = dtToReturn.Rows[0]["SupplierCode"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SupplierCode"];
					m_sSupplierName = dtToReturn.Rows[0]["SupplierName"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["SupplierName"];
					m_sInputStatus = (string)dtToReturn.Rows[0]["InputStatus"];
					m_sPrintStatus = (string)dtToReturn.Rows[0]["PrintStatus"];
					m_sRecordStatus = (string)dtToReturn.Rows[0]["RecordStatus"];
					m_daCreateDate = dtToReturn.Rows[0]["CreateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["CreateDate"];
					m_sUserCreate = dtToReturn.Rows[0]["UserCreate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserCreate"];
					m_daUpdateDate = dtToReturn.Rows[0]["UpdateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["UpdateDate"];
					m_sUserUpdate = dtToReturn.Rows[0]["UserUpdate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserUpdate"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrderItem_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PurchaseOrderItem");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrderItem::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID
		{
			get
			{
				return m_iID;
			}
			set
			{
				SqlInt32 iIDTmp = (SqlInt32)value;
				if(iIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID", "iID can't be NULL");
				}
				m_iID = value;
			}
		}


		public SqlInt32 iPurchaseOrderID
		{
			get
			{
				return m_iPurchaseOrderID;
			}
			set
			{
				SqlInt32 iPurchaseOrderIDTmp = (SqlInt32)value;
				if(iPurchaseOrderIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iPurchaseOrderID", "iPurchaseOrderID can't be NULL");
				}
				m_iPurchaseOrderID = value;
			}
		}


		public SqlString sPurchaseOrderNo
		{
			get
			{
				return m_sPurchaseOrderNo;
			}
			set
			{
				SqlString sPurchaseOrderNoTmp = (SqlString)value;
				if(sPurchaseOrderNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sPurchaseOrderNo", "sPurchaseOrderNo can't be NULL");
				}
				m_sPurchaseOrderNo = value;
			}
		}


		public SqlDateTime daPurchaseOrderDate
		{
			get
			{
				return m_daPurchaseOrderDate;
			}
			set
			{
				SqlDateTime daPurchaseOrderDateTmp = (SqlDateTime)value;
				if(daPurchaseOrderDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daPurchaseOrderDate", "daPurchaseOrderDate can't be NULL");
				}
				m_daPurchaseOrderDate = value;
			}
		}


		public SqlString sItemCode
		{
			get
			{
				return m_sItemCode;
			}
			set
			{
				SqlString sItemCodeTmp = (SqlString)value;
				if(sItemCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemCode", "sItemCode can't be NULL");
				}
				m_sItemCode = value;
			}
		}


		public SqlString sItemName
		{
			get
			{
				return m_sItemName;
			}
			set
			{
				SqlString sItemNameTmp = (SqlString)value;
				if(sItemNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemName", "sItemName can't be NULL");
				}
				m_sItemName = value;
			}
		}


		public SqlString sItemType
		{
			get
			{
				return m_sItemType;
			}
			set
			{
				SqlString sItemTypeTmp = (SqlString)value;
				if(sItemTypeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sItemType", "sItemType can't be NULL");
				}
				m_sItemType = value;
			}
		}


		public SqlDecimal dcQuantity
		{
			get
			{
				return m_dcQuantity;
			}
			set
			{
				SqlDecimal dcQuantityTmp = (SqlDecimal)value;
				if(dcQuantityTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcQuantity", "dcQuantity can't be NULL");
				}
				m_dcQuantity = value;
			}
		}


		public SqlString sUnit
		{
			get
			{
				return m_sUnit;
			}
			set
			{
				SqlString sUnitTmp = (SqlString)value;
				if(sUnitTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUnit", "sUnit can't be NULL");
				}
				m_sUnit = value;
			}
		}


		public SqlString sLocationCode
		{
			get
			{
				return m_sLocationCode;
			}
			set
			{
				SqlString sLocationCodeTmp = (SqlString)value;
				if(sLocationCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationCode", "sLocationCode can't be NULL");
				}
				m_sLocationCode = value;
			}
		}


		public SqlString sLocationName
		{
			get
			{
				return m_sLocationName;
			}
			set
			{
				SqlString sLocationNameTmp = (SqlString)value;
				if(sLocationNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sLocationName", "sLocationName can't be NULL");
				}
				m_sLocationName = value;
			}
		}


		public SqlString sSupplierCode
		{
			get
			{
				return m_sSupplierCode;
			}
			set
			{
				SqlString sSupplierCodeTmp = (SqlString)value;
				if(sSupplierCodeTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sSupplierCode", "sSupplierCode can't be NULL");
				}
				m_sSupplierCode = value;
			}
		}


		public SqlString sSupplierName
		{
			get
			{
				return m_sSupplierName;
			}
			set
			{
				SqlString sSupplierNameTmp = (SqlString)value;
				if(sSupplierNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sSupplierName", "sSupplierName can't be NULL");
				}
				m_sSupplierName = value;
			}
		}


		public SqlString sInputStatus
		{
			get
			{
				return m_sInputStatus;
			}
			set
			{
				m_sInputStatus = value;
			}
		}


		public SqlString sPrintStatus
		{
			get
			{
				return m_sPrintStatus;
			}
			set
			{
				m_sPrintStatus = value;
			}
		}


		public SqlString sRecordStatus
		{
			get
			{
				return m_sRecordStatus;
			}
			set
			{
				m_sRecordStatus = value;
			}
		}


		public SqlDateTime daCreateDate
		{
			get
			{
				return m_daCreateDate;
			}
			set
			{
				SqlDateTime daCreateDateTmp = (SqlDateTime)value;
				if(daCreateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daCreateDate", "daCreateDate can't be NULL");
				}
				m_daCreateDate = value;
			}
		}


		public SqlString sUserCreate
		{
			get
			{
				return m_sUserCreate;
			}
			set
			{
				SqlString sUserCreateTmp = (SqlString)value;
				if(sUserCreateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserCreate", "sUserCreate can't be NULL");
				}
				m_sUserCreate = value;
			}
		}


		public SqlDateTime daUpdateDate
		{
			get
			{
				return m_daUpdateDate;
			}
			set
			{
				SqlDateTime daUpdateDateTmp = (SqlDateTime)value;
				if(daUpdateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daUpdateDate", "daUpdateDate can't be NULL");
				}
				m_daUpdateDate = value;
			}
		}


		public SqlString sUserUpdate
		{
			get
			{
				return m_sUserUpdate;
			}
			set
			{
				SqlString sUserUpdateTmp = (SqlString)value;
				if(sUserUpdateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserUpdate", "sUserUpdate can't be NULL");
				}
				m_sUserUpdate = value;
			}
		}
		#endregion
	}
}
