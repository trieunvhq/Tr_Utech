///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'PurchaseOrder'
// Generated by LLBLGen v1.3.5996.26197 Final on: Tuesday, December 28, 2021, 9:39:20 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace DAL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'PurchaseOrder'.
	/// </summary>
	public class PrPurchaseOrder : PrDBInteractionBase
	{
		#region Class Member Declarations
			private SqlString		m_sExportStatus, m_sInputStatus, m_sGetDataStatus, m_sPrintStatus, m_sRecordStatus;
			private SqlDateTime		m_daCreateDate, m_daPurchaseOrderDate, m_daUpdateDate;
			private SqlInt32		m_iID;
			private SqlString		m_sPurchaseOrderNo, m_sUserUpdate, m_sUserCreate;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public PrPurchaseOrder()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sExportStatus</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sGetDataStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrder_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPurchaseOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPurchaseOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daPurchaseOrderDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daPurchaseOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sExportStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sExportStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInputStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInputStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPrintStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPrintStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGetDataStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGetDataStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID = (SqlInt32)scmCmdToExecute.Parameters["@iID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrder::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate. May be SqlDateTime.Null</LI>
		///		 <LI>sExportStatus</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sGetDataStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate. May be SqlDateTime.Null</LI>
		///		 <LI>sUserCreate. May be SqlString.Null</LI>
		///		 <LI>sUserUpdate. May be SqlString.Null</LI>
		///		 <LI>daUpdateDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrder_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPurchaseOrderNo", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPurchaseOrderNo));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daPurchaseOrderDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daPurchaseOrderDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sExportStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sExportStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sInputStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sInputStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sPrintStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sPrintStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGetDataStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGetDataStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sRecordStatus", SqlDbType.Char, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sRecordStatus));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daCreateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daCreateDate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserCreate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserCreate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sUserUpdate", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sUserUpdate));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daUpdateDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daUpdateDate));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrder::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrder_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrder::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID</LI>
		/// </UL>
		///		 <LI>iID</LI>
		///		 <LI>sPurchaseOrderNo</LI>
		///		 <LI>daPurchaseOrderDate</LI>
		///		 <LI>sExportStatus</LI>
		///		 <LI>sInputStatus</LI>
		///		 <LI>sPrintStatus</LI>
		///		 <LI>sGetDataStatus</LI>
		///		 <LI>sRecordStatus</LI>
		///		 <LI>daCreateDate</LI>
		///		 <LI>sUserCreate</LI>
		///		 <LI>sUserUpdate</LI>
		///		 <LI>daUpdateDate</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrder_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PurchaseOrder");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID = (Int32)dtToReturn.Rows[0]["ID"];
					m_sPurchaseOrderNo = (string)dtToReturn.Rows[0]["PurchaseOrderNo"];
					m_daPurchaseOrderDate = dtToReturn.Rows[0]["PurchaseOrderDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["PurchaseOrderDate"];
					m_sExportStatus = (string)dtToReturn.Rows[0]["ExportStatus"];
					m_sInputStatus = (string)dtToReturn.Rows[0]["InputStatus"];
					m_sPrintStatus = (string)dtToReturn.Rows[0]["PrintStatus"];
					m_sGetDataStatus = (string)dtToReturn.Rows[0]["GetDataStatus"];
					m_sRecordStatus = (string)dtToReturn.Rows[0]["RecordStatus"];
					m_daCreateDate = dtToReturn.Rows[0]["CreateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["CreateDate"];
					m_sUserCreate = dtToReturn.Rows[0]["UserCreate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserCreate"];
					m_sUserUpdate = dtToReturn.Rows[0]["UserUpdate"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["UserUpdate"];
					m_daUpdateDate = dtToReturn.Rows[0]["UpdateDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)dtToReturn.Rows[0]["UpdateDate"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrder::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[PurchaseOrder_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("PurchaseOrder");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("PrPurchaseOrder::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID
		{
			get
			{
				return m_iID;
			}
			set
			{
				SqlInt32 iIDTmp = (SqlInt32)value;
				if(iIDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID", "iID can't be NULL");
				}
				m_iID = value;
			}
		}


		public SqlString sPurchaseOrderNo
		{
			get
			{
				return m_sPurchaseOrderNo;
			}
			set
			{
				SqlString sPurchaseOrderNoTmp = (SqlString)value;
				if(sPurchaseOrderNoTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sPurchaseOrderNo", "sPurchaseOrderNo can't be NULL");
				}
				m_sPurchaseOrderNo = value;
			}
		}


		public SqlDateTime daPurchaseOrderDate
		{
			get
			{
				return m_daPurchaseOrderDate;
			}
			set
			{
				SqlDateTime daPurchaseOrderDateTmp = (SqlDateTime)value;
				if(daPurchaseOrderDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daPurchaseOrderDate", "daPurchaseOrderDate can't be NULL");
				}
				m_daPurchaseOrderDate = value;
			}
		}


		public SqlString sExportStatus
		{
			get
			{
				return m_sExportStatus;
			}
			set
			{
				m_sExportStatus = value;
			}
		}


		public SqlString sInputStatus
		{
			get
			{
				return m_sInputStatus;
			}
			set
			{
				m_sInputStatus = value;
			}
		}


		public SqlString sPrintStatus
		{
			get
			{
				return m_sPrintStatus;
			}
			set
			{
				m_sPrintStatus = value;
			}
		}


		public SqlString sGetDataStatus
		{
			get
			{
				return m_sGetDataStatus;
			}
			set
			{
				m_sGetDataStatus = value;
			}
		}


		public SqlString sRecordStatus
		{
			get
			{
				return m_sRecordStatus;
			}
			set
			{
				m_sRecordStatus = value;
			}
		}


		public SqlDateTime daCreateDate
		{
			get
			{
				return m_daCreateDate;
			}
			set
			{
				SqlDateTime daCreateDateTmp = (SqlDateTime)value;
				if(daCreateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daCreateDate", "daCreateDate can't be NULL");
				}
				m_daCreateDate = value;
			}
		}


		public SqlString sUserCreate
		{
			get
			{
				return m_sUserCreate;
			}
			set
			{
				SqlString sUserCreateTmp = (SqlString)value;
				if(sUserCreateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserCreate", "sUserCreate can't be NULL");
				}
				m_sUserCreate = value;
			}
		}


		public SqlString sUserUpdate
		{
			get
			{
				return m_sUserUpdate;
			}
			set
			{
				SqlString sUserUpdateTmp = (SqlString)value;
				if(sUserUpdateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sUserUpdate", "sUserUpdate can't be NULL");
				}
				m_sUserUpdate = value;
			}
		}


		public SqlDateTime daUpdateDate
		{
			get
			{
				return m_daUpdateDate;
			}
			set
			{
				SqlDateTime daUpdateDateTmp = (SqlDateTime)value;
				if(daUpdateDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("daUpdateDate", "daUpdateDate can't be NULL");
				}
				m_daUpdateDate = value;
			}
		}
		#endregion
	}
}
