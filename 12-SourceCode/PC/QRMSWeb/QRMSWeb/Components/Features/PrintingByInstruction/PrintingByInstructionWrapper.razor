@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils

@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="DANH MỤC IN NHÃN" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <h4>Tìm kiếm</h4>
                    <PrintingByInstructionSearchForm OnImport="@OnImport"
                                                     OnSearch="@OnSearch"
                                                     @bind-ItemType="@itemType"
                                                     @bind-WareHouseCode="@wareHouseCode"
                                                     @bind-PurchaseOrderNo="@purchaseOrderNo"
                                                     @bind-DateFrom="@startDate"
                                                     @bind-DateTo="@endDate"
                                                     @bind-PrintStatus="@printStatus" />
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@_LabelPrintModels"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   MinColumnActionWidth="142"
                                   IndexColSize="60">

                            <TableActionButton Context="item">
                                <TableCommonAction OnClickDelete="() => OnClickDelete(item)"
                                                   OnClickPrint="() => OnClickPrint(item)"
                                                   ShowPrint="true"
                                                   ShowDetail="false"
                                                   ShowEdit="false"
                                                   ShowDelete="true" />
                            </TableActionButton>
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@if (!loading)
{
    <PrintingByInstructionImportDialog showCount="@printDialogShowCount"
                                       OnImport="OnImported">

    </PrintingByInstructionImportDialog>
}
@code
{
    private string itemType = "";
    private string wareHouseCode = "";
    private string purchaseOrderNo = "";
    private string printStatus = "";
    private string startDate = "";
    private string endDate = "";

    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;
    private int printDialogShowCount = 0;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
    {
        new BreadcrumbLevel() {name = "In nhãn", path = ""},
        new BreadcrumbLevel() {name = "In nhãn theo chỉ thị in", path = "/PrintingByInstruction"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
    {
        new TableLabels {label = "Số chỉ thị in", dataIndex = "PrintOrderNo",columnWidth=150, align="center"},
        new TableLabels {label = "Ngày chỉ thị", dataIndex = "PrintOrderDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Loại nhãn", dataIndex = "ItemTypeName",columnWidth=150, align="center"},
        new TableLabels {label = "Mã kho", dataIndex = "WarehouseCode",columnWidth=150, align="center"},
        new TableLabels {label = "Tên kho", dataIndex = "WarehouseName",columnWidth=250},
        new TableLabels {label = "Trạng thái in", dataIndex = "PrintStatusName",columnWidth=250, align="center"},

    };

    private bool loading = true;
    private List<LabelPrintModel> _LabelPrintModels = new List<LabelPrintModel>();
    private PrintingService _PrintingService;

    private async Task OnSearch()
    {
        loading = true;
        CurrentPage = 1;
        await storeParamSearch();
        await OnInitData();
    }

    private async Task OnImport()
    {
        try
        {
            printDialogShowCount++;
            await InvokeAsync(StateHasChanged);
            await _jsRuntime.InvokeVoidAsync("ShowModal", "PrintingByInstructionImportDialog");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _LabelPrintModels = new List<LabelPrintModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }

    private async Task OnImported(int result)
    {
        try
        {
            loading = true;
            CurrentPage = 1;
            if (result > 0)
            {
                // await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đã import thành công", "success");
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _LabelPrintModels = new List<LabelPrintModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    private async Task storeParamSearch()
    {
        startDate = await _jsRuntime.InvokeAsync<string>("getValByElId", "searchStartDate");
        endDate = await _jsRuntime.InvokeAsync<string>("getValByElId", "searchEndDate");

        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_ItemType", !String.IsNullOrWhiteSpace(itemType) ? itemType : "");
        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_WareHouseCode", !String.IsNullOrWhiteSpace(wareHouseCode) ? wareHouseCode : "");
        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_PurchaseOrderNo", !String.IsNullOrWhiteSpace(purchaseOrderNo) ? purchaseOrderNo : "");
        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_PrintStatus", !String.IsNullOrWhiteSpace(printStatus) ? printStatus : "");
        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_StartDate", !String.IsNullOrWhiteSpace(startDate) ? startDate : "");
        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_EndDate", !String.IsNullOrWhiteSpace(endDate) ? endDate : "");

        await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_CurrentPage", CurrentPage.ToString());
    }
    private async Task retryParamSearch()
    {
        itemType = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_ItemType") ?? "";
        wareHouseCode = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_WareHouseCode") ?? "";
        purchaseOrderNo = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_PurchaseOrderNo") ?? "";
        printStatus = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_PrintStatus") ?? "";
        startDate = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_StartDate") ?? "";
        endDate = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_EndDate") ?? "";

        var curPage = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_CurrentPage") ?? "";
        CurrentPage = CommonUtils.ConvertStringNumberVNToInt(curPage) ?? 1;
        if (CurrentPage <= 0) CurrentPage = 1;
    }
    protected override void OnInitialized()
    {
        try
        {
            _PrintingService = new PrintingService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PrintingByInstruction");
        }
    }


    private async Task OnInitData()
    {
        try
        {
            await retryParamSearch();

            var glStartDate = CommonUtils.ConvertDateVNFormatedToDate(startDate);
            var glStrgStartDate = glStartDate != null ? glStartDate.ToString() : "";
            var glEndDate = CommonUtils.ConvertDateVNFormatedToDate(endDate);
            var glStrgEndDate = glEndDate != null ? glEndDate.ToString() : "";

            var response = await _PrintingService.SearchLabelPrint(CurrentPage, RowPerPage,
            itemType,purchaseOrderNo, wareHouseCode, printStatus, startDate, endDate, false);
            _LabelPrintModels = response.rows ?? new List<LabelPrintModel>();
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _LabelPrintModels = new List<LabelPrintModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                startDate = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_StartDate") ?? "";
                if (string.IsNullOrEmpty(startDate?.Trim()))
                {

                    startDate = CommonUtils.GetDateVNFormated(DateTime.Now);
                    await _localStorageService.SetItemAsStringAsync("search_PrintingByInstruction_StartDate", !String.IsNullOrWhiteSpace(startDate) ? startDate : "");
                }
                endDate = await _localStorageService.GetItemAsStringAsync("search_PrintingByInstruction_EndDate") ?? "";
                if (string.IsNullOrEmpty(endDate?.Trim())) {
                    await _jsRuntime.InvokeAsync<string>("clearDateTimePickerByElId", "searchEndDate1");
                }
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PrintingByInstruction");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await OnInitData();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }


    private void OnClickPrint(LabelPrintModel labelPrintModel)
    {
        UriHelper.NavigateTo($"/PrintingByInstruction/Print/{labelPrintModel.ID}", true);

    }


    private async Task OnClickDelete(LabelPrintModel labelPrintModel)
    {
        try
        {
            var confirmRemove = await _jsRuntime.InvokeAsync<int>("showPrompt",
                "Thông báo",
                $"Bạn có chắc chắn muốn xóa chỉ thị in nhãn {labelPrintModel.PrintOrderNo} không?",
                "xóa",
                "Huỷ", "", "", "");

            if (confirmRemove == 1)
            {
                var responseData = await _PrintingService.DeleteLabelPrint(labelPrintModel);
                string errCode = String.IsNullOrEmpty(responseData.ErrorCode?.Trim()) ? "0" : responseData.ErrorCode?.Trim();
                if ("0".Equals(errCode))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đã xóa thành công", "success");
                    await OnInitData();
                }
                else if ("-2".Equals(errCode))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đơn đang được sử dụng", "error");
                }
                else
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Xóa thất bại", "error");

                }
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }

}