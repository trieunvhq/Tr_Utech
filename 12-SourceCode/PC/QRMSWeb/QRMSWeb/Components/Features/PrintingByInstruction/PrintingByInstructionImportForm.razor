@using Newtonsoft.Json
@using System.Text.RegularExpressions

@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<div class="modal fade" id="dialogInsuredPersonForm" name="dialogInsuredPersonForm" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document" style="min-width: 90%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Thông tin người được bảo hiểm</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>CloseDialog()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (loading)
            {
                <div class="text-center">
                    Đang tải...
                </div>
            }
            else
            {
                <div class="modal-body" style="padding-bottom: 0px; margin-left:25px; margin-right:25px">

                    <div class="card">
                        <div class="card-body contain-body-input-form" style="">
                            <div class="px-md-4">
                                <div class="row">
                                    

                                        
                                    <div class="form-group">
                                        <div class="row col-12">
                                            <label class="col-6 col-form-labelt label-input-form">Ảnh Cmt mặt trước</label>

                                            @if (!IsDetail)
                                            {
                                                <InputFile name="imageUpload" id="imageUpload" accept=".xls | xlsx"
                                                           OnChange="OnChangeFile"
                                                           class="filestyle col-8" style="display:none" />
                                                <label for="imageUpload" class="btn btn-primary waves-effect ml-3 mr-3">Chọn</label>
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row btn-row">
                    <div class="col-12 d-flex flex-row align-items-center justify-content-end">
                        <div class="button-items">
                            <button type="button"
                                    disabled="@(isSubmitting)"
                                    class="btn btn-primary waves-effect waves-light mr-0" data-dismiss="modal" @onclick="()=>CloseDialog()">
                                Huỷ bỏ
                            </button>
                            @if (!IsDetail)
                            {
                                @if (IsEdit)
                                {
                                    <button type="button"
                                            disabled="@(isSubmitting)"
                                            class="btn btn-primary waves-effect waves-light mr-0" @onclick="OnSave">
                                        Cập nhật
                                    </button>
                                }
                                else
                                {
                                    <button type="button"
                                            disabled="@(isSubmitting)"
                                            class="btn btn-primary waves-effect waves-light mr-0" @onclick="OnSave">
                                        Thêm mới
                                    </button>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

    </div>
</div>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool IsDetail { get; set; } = false;
    [Parameter]
    public bool IsEdit { get; set; } = false;


    [Parameter]
    public int showCount { get; set; } = 0;

    public int showCountOld { get; set; } = 0;
    /*
    [Parameter]
    public Func<InsuredPersonModel, int, Task> OnSaveInsuredPerson { get; set; }

    [Parameter]
    public List<CancerFatalIllnessInsFeeModel> CancerFatalIllnessInsFeeModels { get; set; } = new List<CancerFatalIllnessInsFeeModel>();
    */

    // Private vars
    bool loading = true;
    bool isSubmitting = false;


    class SelectOption
    {
        public string label { get; set; }
        public int value { get; set; }
    }


    // Services

    // Data binding
    async Task OnInitData()
    {
        try
        {

        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            //    await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/insuranceContractTravelInternational/Complete");

        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        try
        {
            // _exchangeRateService = new ExchangeRateService(_httpClient);
        }
        catch (Exception e)
        {

            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra", "");
            //close dialog
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender || showCountOld != showCount)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                showCountOld = showCount;
                await OnInitData();

                loading = false;
                StateHasChanged();

            }
        }
        catch (Exception e)
        {

            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            // await _jsRuntime.InvokeVoidAsync("closeModal", "dialogInsuredPersonForm");
        }
    }

    async Task OnSave()
    {
        isSubmitting = true;
        try
        {
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra", "");
            isSubmitting = false;
        }

        isSubmitting = false;
    }

    async Task CloseDialog()
    {
        await _jsRuntime.InvokeVoidAsync("closeModal", "dialogInsuredPersonForm");
    }

    private async Task OnChangeFile(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.GetMultipleFiles().First();
            var buffers = new byte[file.Size];
            await file.OpenReadStream(Constants.Constants.MAX_UPLOAD_FILE).ReadAsync(buffers);
           // docAttachModel.FILE_CONTENT = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffers)}";

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", ex.Message, "Có lỗi xảy ra", "");
        }
    }
}
