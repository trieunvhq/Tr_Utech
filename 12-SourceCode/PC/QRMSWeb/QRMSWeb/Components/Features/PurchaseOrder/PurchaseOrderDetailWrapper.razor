@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils

@using Microsoft.AspNetCore.Http.Extensions
@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="CHI TIẾT ĐƠN MUA HÀNG" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <PurchaseOrderDetailSearchForm OnImport="@OnImport"
                                                   OnSearch="@OnSearch"
                                                   @bind-WareHouseCode="@wareHouseCode"
                                                   @bind-SupplierName="@supplierName"
                                                   @bind-PurchaseOrderNo="@_purchaseOrderNo"
                                                   @bind-InputStatusName="@inputStatusName"
                                                   @bind-PurchaseOrderDate="@purchaseOrderDate" />
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@_purchaseOrderItemModels"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   MinColumnActionWidth="110"
                                   IndexColSize="60">
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string PurchaseOrderNo { get; set; }
    private string wareHouseCode = "";
    private string supplierName = "";
    private string _purchaseOrderNo = "";
    private string inputStatusName = "";
    private string purchaseOrderDate = "";
    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh mục đơn mua hàng", path = "/PurchaseOrder"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
{
        new TableLabels {label = "Số đơn hàng", dataIndex = "PurchaseOrderNo",columnWidth=150},
        new TableLabels {label = "Ngày đặt", dataIndex = "PurchaseOrderDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Tên linh kiện", dataIndex = "ItemName",columnWidth=250},
        new TableLabels {label = "Mã linh kiện", dataIndex = "ItemCode",columnWidth=150 },
        new TableLabels {label = "Mã nhà cung cấp", dataIndex = "SupplierCode",columnWidth=150},
        new TableLabels {label = "Số lượng", dataIndex = "Quantity", dataType="number", columnWidth=110},
        new TableLabels {label = "Đơn vị", dataIndex = "Unit",columnWidth=80},
    };

    private bool loading = true;
    private PurchaseOrderModel _purchaseOrderModel = new PurchaseOrderModel();
    private List<PurchaseOrderItemModel> _purchaseOrderItemModels = new List<PurchaseOrderItemModel>();
    private PurchaseOrderService _purchaseOrderService;

    private async Task OnSearch()
    {
        loading = true;
        CurrentPage = 1;
        await OnInitData();
    }

    private async Task OnImport()
    {
        try
        {
            loading = true;
            CurrentPage = 1;
            var responseData = await _purchaseOrderService.ImportPurchaseOrder();
            string errCode = String.IsNullOrEmpty(responseData.ErrorCode?.Trim()) ? "0" : responseData.ErrorCode?.Trim();
            if ("0".Equals(errCode))
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đã lấy thông tin từ hệ thống AMIS thành công", "success");
                await OnInitData();
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Lấy thông tin từ hệ thống AMIS thất bại", "error");

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _purchaseOrderItemModels = new List<PurchaseOrderItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnInitialized()
    {
        try
        {
            Levels.Add(new BreadcrumbLevel() { name = "Chi tiết đơn mua hàng", path = $"/PurchaseOrder/detail/{PurchaseOrderNo}" });

            _purchaseOrderService = new PurchaseOrderService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PurchaseOrder");
        }
    }

    private async Task ImportPurchaseOrder()
    {
        try
        {
            var response = await _purchaseOrderService.ImportPurchaseOrder();
            await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Thành công", "success");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _purchaseOrderItemModels = new List<PurchaseOrderItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInitData()
    {
        try
        {
            _purchaseOrderModel = await _purchaseOrderService.GetPurchaseOrderByPurchaseOrderNo(PurchaseOrderNo);
            if (_purchaseOrderModel != null)
            {
                _purchaseOrderNo = _purchaseOrderModel.PurchaseOrderNo;
                supplierName = _purchaseOrderModel.SupplierName;
                purchaseOrderDate = _purchaseOrderModel.PurchaseOrderDate.ToString();
                wareHouseCode = _purchaseOrderModel.WarehouseCode;
                inputStatusName = _purchaseOrderModel.InputStatusName;
            }
            var response = await _purchaseOrderService.SearchPurchaseOrderItem(CurrentPage, RowPerPage,
             _purchaseOrderNo);
            _purchaseOrderItemModels = response.rows;
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _purchaseOrderItemModels = new List<PurchaseOrderItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PurchaseOrder");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await OnInitData();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }
}