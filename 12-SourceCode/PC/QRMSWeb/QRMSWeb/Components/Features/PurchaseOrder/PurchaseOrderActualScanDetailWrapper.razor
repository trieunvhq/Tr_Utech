@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils
@using QRMSWeb.Constants

@using Microsoft.AspNetCore.Http.Extensions
@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="CHI TIẾT THỰC TẾ SCAN ĐƠN MUA HÀNG" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <PurchaseOrderActualScanDetailSearchForm 
                                             OnExport="@OnExport"
                                             @bind-WareHouseName="@wareHouseName"
                                             @bind-PurchaseOrderNo="@PurchaseOrderNo"
                                             @bind-PurchaseOrderDate="@PurchaseOrderDate" />
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@_purchaseOrderActualScanModels"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   IndexColSize="60">
                            
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public object ID { get; set; }

    [Parameter]
    public string PurchaseOrderNo { get; set; }
    [Parameter]
    public string wareHouseName { get; set; }
    [Parameter]
    public string PurchaseOrderDate { get; set; }
    [Parameter]
    public bool IsDetail { get; set; } = false;

    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh mục đơn mua hàng", path = "/PurchaseOrder"},
        new BreadcrumbLevel() {name = "Chi tiết thực tế scan đơn mua hàng", path = "#"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
{
        new TableLabels {label = "Ngày nhập kho", dataIndex = "OrderDate",dataType="date",columnWidth=150},
        new TableLabels {label = "Mã kho", dataIndex = "ItemCode",columnWidth=150 },
        new TableLabels {label = "Mã hàng", dataIndex = "ItemCode",columnWidth=250},
        new TableLabels {label = "Tên hàng", dataIndex = "ItemName",columnWidth=250},
        new TableLabels {label = "Other code", dataIndex = "EXT_OtherCode",columnWidth=150},
        new TableLabels {label = "Serial", dataIndex = "EXT_Serial",columnWidth=150},
        new TableLabels {label = "PartNo", dataIndex = "EXT_PartNo",columnWidth=150},
        new TableLabels {label = "Rec date", dataIndex = "EXT_RecDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Exp date", dataIndex = "EXT_ExpDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Số lượng", dataIndex = "Quantity", dataType="number", columnWidth=110},
        new TableLabels {label = "Đơn vị tính", dataIndex = "Unit",columnWidth=110},
    };

    private bool loading = true;
    private List<TransactionHistoryModel> _purchaseOrderActualScanModels = new List<TransactionHistoryModel>();
    private PurchaseOrderService _purchaseOrderService;

    protected override void OnInitialized()
    {
        try
        {
            _purchaseOrderService = new PurchaseOrderService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PurchaseOrder");
        }
    }


    private async Task OnInitData()
    {
        try
        {
            var _purchaseOrderDate = CommonUtils.ConvertDateVNFormatedToDate(PurchaseOrderDate);
            var _purchaseOrderDateStr = _purchaseOrderDate != null ? _purchaseOrderDate.ToString() : "";

            var response = await _purchaseOrderService.PurchaseOrderActualScanDetail(CurrentPage, RowPerPage,
                 PurchaseOrderNo);
            _purchaseOrderActualScanModels = response.rows;
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _purchaseOrderActualScanModels = new List<TransactionHistoryModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {

                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PurchaseOrder");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await OnInitData();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }


    private async Task OnExport()
    {
        string query = $"purchaseOrderNo={PurchaseOrderNo}";
        UriHelper.NavigateTo($"/PurchaseOrder/ViewExcelReport?{query}", true);
    }
}