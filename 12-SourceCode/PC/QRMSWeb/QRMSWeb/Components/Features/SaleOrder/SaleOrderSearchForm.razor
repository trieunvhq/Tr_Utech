@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils
@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<form autocomplete="off" class="search-body-form">
    <div class="row search-row-input">
        <div class="row form-group col-6">
            <label class="col-3 col-form-label">Kho</label>
            <div class="col-9">
                <select value="@WareHouseCode"
                        @onchange="@((evt) => WareHouseCodeChanged.InvokeAsync(evt.Value?.ToString()))"
                        class="form-control">
                    <option value="">---</option>
                    @for (int index = 0; index < _wareHouseModels.Count; index++)
                    {
                        <option data-limit="70" selected="@(_wareHouseModels[index].WarehouseCode.Equals(WareHouseCode))" value="@_wareHouseModels[index].WarehouseCode">
                            @_wareHouseModels[index].WarehouseCode - @_wareHouseModels[index].WarehouseName
                        </option>
                    }
                </select>
            </div>
        </div>
        <div class="row form-group col-6">
            <label class="col-4 col-form-label">Ngày đặt hàng</label>

        </div>
        <div class="row form-group col-6">
            <label class="col-3 col-form-label">Đơn đặt hàng</label>
            <div class="col-9">
                <input type="text" placeholder=""
                       autocomplete="off"
                       value="@SaleOrderNo"
                       @onchange="@((evt) => SaleOrderNoChanged.InvokeAsync(evt.Value?.ToString()))"
                       class="form-control">
            </div>
        </div>
        <div class="row form-group col-4">
            <label class="col-3 col-form-label">Từ ngày</label>
            <div class="col-9">
                <div class="input-group pjc-date-picker"
                     id="searchStartDate1" data-target-input="nearest">
                    <input type="text" class="form-control datetimepicker-input" data-target="#searchStartDate1"
                           id="searchStartDate" placeholder="ngày/tháng/năm" autocomplete="off"
                           value="@DateFrom" />
                    <div class="input-group-append" data-target="#searchStartDate1" data-toggle="datetimepicker">
                        <span class="input-group-text">
                            <i class="fa fa-calendar teal-color" style="color: cadetblue" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row form-group col-6">
            <label class="col-3 col-form-label">Trạng thái</label>
            <div class="col-9">

                <select value="@ExportStatus"
                        @onchange="@((evt) => ExportStatusChanged.InvokeAsync(evt.Value?.ToString()))" class="form-control">
                    <option value="">---</option>
                    <option value="Y">Đã xuất</option>
                    <option value="D">Đang xuất</option>
                    <option value="N">Chưa xuất</option>
                </select>
            </div>
        </div>
        <div class="row form-group col-4">
            <label class="col-3 col-form-label">Đến ngày</label>
            <div class="col-9">
                <div class="input-group pjc-date-picker"
                     id="searchEndDate1" data-target-input="nearest">
                    <input type="text" class="form-control datetimepicker-input" data-target="#searchEndDate1"
                           id="searchEndDate" placeholder="ngày/tháng/năm" autocomplete="off"
                           value="@DateTo" />
                    <div class="input-group-append" data-target="#searchEndDate1" data-toggle="datetimepicker">
                        <span class="input-group-text">
                            <i class="fa fa-calendar teal-color" style="color: cadetblue" aria-hidden="true"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex flex-row justify-content-end btn-row pb-0 button_search_footer1">
        <div class="button-items">
            <button type="button" class="btn btn-primary waves-effect waves-light" @onclick="@OnSearch">Tìm kiếm</button>
            <button type="button" class="btn btn-primary waves-effect mr-3" @onclick="@OnImport">Cập nhật từ AMIS</button>
        </div>
    </div>

</form>

@code {

    [Parameter]
    public string WareHouseCode { get; set; }

    [Parameter]
    public EventCallback<string> WareHouseCodeChanged { get; set; }


    [Parameter]
    public string ExportStatus { get; set; }

    [Parameter]
    public EventCallback<string> ExportStatusChanged { get; set; }

    [Parameter]
    public string SaleOrderNo { get; set; }

    [Parameter]
    public EventCallback<string> SaleOrderNoChanged { get; set; }

    [Parameter]
    public string DateFrom { get; set; }

    [Parameter]
    public EventCallback<string> DateFromChanged { get; set; }
    [Parameter]
    public string DateTo { get; set; }

    [Parameter]
    public EventCallback<string> DateToChanged { get; set; }

    [Parameter]
    public Func<Task> OnImport { get; set; }

    [Parameter]
    public Func<Task> OnSearch { get; set; }


    private List<WareHouseModel> _wareHouseModels = new List<WareHouseModel>();
    private WareHouseService _wareHouseService;
    protected override void OnInitialized()
    {
        try
        {
            _wareHouseService = new WareHouseService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/PurchaseOrder");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _wareHouseModels = await _wareHouseService.GetAllWareHouses();
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                //set vn date
                await _jsRuntime.InvokeVoidAsync("vnDatePicker");
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra", "");
        }
    }
}