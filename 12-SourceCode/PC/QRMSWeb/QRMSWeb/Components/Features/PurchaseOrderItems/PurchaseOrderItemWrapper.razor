@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper

@using Microsoft.AspNetCore.Http.Extensions
@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="DANH MỤC ĐƠN MUA HÀNG" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <h4>Tìm kiếm</h4>
                    <PurchaseOrderItemSearchForm OnImport="@OnImport"
                                       OnSearch="@OnSearch"
                                       @bind-ItemName="@itemName"
                                       @bind-LocationName="@locationName"
                                       @bind-PurchaseOrderNo="@purchaseOrderNo"
                                       @bind-DateFrom="@dateFrom"
                                       @bind-DateTo="@dateTo"
                                       @bind-ItemCode="@itemCode" />
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@accounts"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   MinColumnActionWidth="142"
                                   IndexColSize="60">
                            <!--<AddButton>
                                <div class="d-flex flex-row justify-content-end">
                                    <button @onclick="OnClickAdd" type="button" class="btn btn-primary waves-effect waves-light">
                                        Thêm mới
                                    </button>
                                </div>
                            </AddButton>-->

                            <TableActionButton Context="item">
                                <TableCommonAction OnClickDetail="() => OnClickDetail(item)"
                                                   OnClickExportExcel="() => OnClickExportExcel(item)"
                                                   ShowExportExcel="true"
                                                   ShowEdit="false"
                                                   ShowDelete="false" />
                            </TableActionButton>
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private string itemCode = "";
    private string itemName = "";
    private string purchaseOrderNo = "";
    private string locationName = "";
    private string dateFrom = "";
    private string dateTo = "";
    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh mục đơn mua hàng", path = "/PurchaseOrderItems"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
    {
        new TableLabels {label = "Số đơn hàng", dataIndex = "purchaseOrderNo",columnWidth=150},
        new TableLabels {label = "Ngày đặt", dataIndex = "SaleOrderDate",columnWidth=250},
        new TableLabels {label = "Tên linh kiện", dataIndex = "ItemName",columnWidth=150},
        new TableLabels {label = "Mã linh kiện", dataIndex = "ItemCode",columnWidth=150 },
        new TableLabels {label = "Khách hàng", dataIndex = "CustomerName",columnWidth=200},
        new TableLabels {label = "Số lượng", dataIndex = "Quantity",columnWidth=150},
        new TableLabels {label = "Đơn vị", dataIndex = "Unit",columnWidth=150},
    };

    private bool loading = true;
    private List<PurchaseOrderItemModel> accounts = new List<PurchaseOrderItemModel>();
    private PurchaseOrderItemService _purchaseOrderItemService;

    private async Task OnSearch()
    {
        loading = true;
        CurrentPage = 1;
        await storeParamSearch();
        await SearchPurchaseOrderItem();
    }

    private async Task OnImport()
    {
        try
        {

            loading = true;
            CurrentPage = 1;

            await ImportPurchaseOrderItem();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
        }
    }
    private async Task storeParamSearch()
    {

        await _localStorageService.SetItemAsStringAsync("search_purchaseOrderItem_LocationName", !String.IsNullOrWhiteSpace(locationName) ? locationName : "");
        await _localStorageService.SetItemAsStringAsync("search_purchaseOrderItem_purchaseOrderNo", !String.IsNullOrWhiteSpace(purchaseOrderNo) ? purchaseOrderNo : "");
        await _localStorageService.SetItemAsStringAsync("search_purchaseOrderItem_itemCode", !String.IsNullOrWhiteSpace(itemCode) ? itemCode : "");
        await _localStorageService.SetItemAsStringAsync("search_purchaseOrderItem_itemName", !String.IsNullOrWhiteSpace(itemName) ? itemName : "");
    }
    private async Task retryParamSearch()
    {
        locationName = await _localStorageService.GetItemAsStringAsync("search_purchaseOrderItem_LocationName") ?? "";
        purchaseOrderNo = await _localStorageService.GetItemAsStringAsync("search_purchaseOrderItem_purchaseOrderNo") ?? "";
        itemCode = await _localStorageService.GetItemAsStringAsync("search_purchaseOrderItem_itemCode") ?? "";
        itemName = await _localStorageService.GetItemAsStringAsync("search_purchaseOrderItem_itemName") ?? "";
    }
    protected override void OnInitialized()
    {
        try
        {
            _purchaseOrderItemService = new PurchaseOrderItemService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/users");
        }
    }

    private async Task ImportPurchaseOrderItem()
    {
        try
        {
            var response = await _purchaseOrderItemService.ImportPurchaseOrderItem();
            await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Thành công", "success");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            accounts = new List<PurchaseOrderItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchPurchaseOrderItem()
    {
        try
        {
            await retryParamSearch();
            var response = await _purchaseOrderItemService.SearchPurchaseOrderItem(CurrentPage, RowPerPage, itemCode, itemName,locationName,purchaseOrderNo);
            accounts = response.rows ?? new List<PurchaseOrderItemModel>();
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            accounts = new List<PurchaseOrderItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                await SearchPurchaseOrderItem();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/users");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await SearchPurchaseOrderItem();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }

    private void OnClickDetail(PurchaseOrderItemModel purchaseOrderItem)
    {
        UriHelper.NavigateTo($"/PurchaseOrderItems/detail/{purchaseOrderItem.ID}", true);
    }

    private void OnClickEdit(PurchaseOrderItemModel purchaseOrderItem)
    {
        UriHelper.NavigateTo($"/PurchaseOrderItems/edit/{purchaseOrderItem.ID}", true);
    }

    private async void OnClickExportExcel(PurchaseOrderItemModel purchaseOrderItem)
    {
        await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "ImportExcel", "success");
    }

    

    private async Task OnClickDelete(PurchaseOrderItemModel purchaseOrderItem)
    {
        try
        {
            bool confirmRemove = await _jsRuntime.InvokeAsync<bool>("showPrompt",
                "Thông báo",
                $"Bạn có muốn xóa đơn {purchaseOrderItem.PurchaseOrderNo}",
                "xóa",
                "Huỷ", "", "", "");

            if (confirmRemove)
            {
                var responseData = await _purchaseOrderItemService.DeletePurchaseOrderItem(purchaseOrderItem);
                string errCode = String.IsNullOrEmpty(responseData.ErrorCode?.Trim()) ? "0" : responseData.ErrorCode?.Trim();
                if ("0".Equals(errCode))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đã xóa thành công", "success");
                    await SearchPurchaseOrderItem();
                }
                else if ("-2".Equals(errCode))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Tài khoản đang được sử dụng", "error");
                }
                else
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Xóa thất bại", "error");

                }
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }
    private void OnClickAdd()
    {
        UriHelper.NavigateTo("/PurchaseOrderItems/create", true);
    }
}