@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Utils
@using QRMSWeb.Helper
@using System.Text.RegularExpressions
@using QRMSWeb.Constants

@using Newtonsoft.Json
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime

<Breadcrumb Title="@title" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body contain-body-input-form">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <form @onsubmit:preventDefault @onsubmit="@OnSubmitForm" autocomplete="off">
                            <div class="row">
                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Tài khoản (*)</label>
                                    <div class="col-12">
                                        <input class="form-control" type="text" disabled="@(IsUpdate || IsDetail)"
                                               @bind="_UserModel.Code"
                                               autocomplete="off"
                                               placeholder="">
                                    </div>
                                </div>
                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Tên đầy đủ (*)</label>
                                    <div class="col-12">
                                        <input class="form-control"
                                               autocomplete="off"
                                               @bind="_UserModel.FullName"
                                               type="text" placeholder="">
                                    </div>
                                </div>
                                @if (!IsUpdate && !IsDetail)
                                {
                                    <div class="form-group col-3">
                                        <label class="col-12 col-form-labelt label-input-form">Mật khẩu (*)</label>
                                        <div class="col-12">
                                            <input class="form-control"
                                                   @bind="_UserModel.Password"
                                                   type="password"
                                                   placeholder="">
                                        </div>
                                    </div>
                                }

                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Loại tài khoản</label>
                                    <div class="col-12">
                                        <select @bind="_UserModel.Role" class="form-control">
                                            <option value="">---</option>
                                            <option value="admin">Admin</option>
                                            <option value="khác">Nhân viên</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Điện thoại</label>
                                    <div class="col-12">
                                        <input class="form-control" type="text"
                                               @bind="_UserModel.Phone"
                                               autocomplete="off"
                                               placeholder="">
                                    </div>
                                </div>
                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Email</label>
                                    <div class="col-12">
                                        <input class="form-control"
                                               autocomplete="off"
                                               @bind="_UserModel.Email"
                                               type="text" placeholder="">
                                    </div>
                                </div>
                                <div class="form-group col-3">
                                    <label class="col-12 col-form-labelt label-input-form">Kho</label>
                                    <div class="col-12">
                                        <select value="@_UserModel.WarehouseCode"
                                                @onchange="OnChangeWareHouseCode"
                                                class="form-control">
                                            <option value="">---</option>
                                            @for (int index = 0; index < _wareHouseModels.Count; index++)
                                            {
                                                <option data-limit="70" selected="@(_wareHouseModels[index].WarehouseCode.Equals(_UserModel.WarehouseCode))" value="@_wareHouseModels[index].WarehouseCode">
                                                    @_wareHouseModels[index].WarehouseCode - @_wareHouseModels[index].WarehouseName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <hr />
                            <div class="row btn-row">
                                <div class="col-12 d-flex flex-row align-items-center justify-content-end">
                                    <div class="button-items">
                                        <button type="button" class="btn btn-primary waves-effect mr-3" disabled="@isSubmitting" onclick="window.history.back()">Quay lại</button>
                                        <button type="submit" disabled="@isSubmitting" class="btn btn-primary waves-effect waves-light mr-3">
                                            @(IsUpdate ? "Cập nhật" : "Thêm mới")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public object AccountID { get; set; }
    [Parameter]
    public bool IsDetail { get; set; } = false;

    [Parameter]
    public bool IsUpdate { get; set; } = false;

    public string title
    {
        get
        {
            return IsDetail ? "Chi tiết người dùng" : ( IsUpdate ? "Cập nhật người dùng" : "Thêm mới người dùng");
        }
    }

    private bool isSubmitting = false;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh sách người dùng", path = "/users"},
    };

    private int? divisionId = null;
    private List<WareHouseModel> _wareHouseModels = new List<WareHouseModel>();
    private WareHouseService _wareHouseService ;
    private UserService _userService;

    private UserModel _UserModel;
    private bool loading = true;

    private string PASSWORD_HASH { get; set; }


    protected override void OnInitialized()
    {
        try
        {
            Levels.Add(new BreadcrumbLevel() { name = title, path = IsDetail ? $"/usersv/detail/{AccountID}" : IsUpdate ? $"/users/edit/{AccountID}" : "/users/create" });
            _userService = new UserService(_httpClient);
            _wareHouseService = new WareHouseService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/users");
        }
    }
    private async Task OnInitData()
    {
        try
        {
            _wareHouseModels = await _wareHouseService.GetAllWareHouses();
            if (IsUpdate || IsDetail)
            {
                _UserModel = await _userService.GetAccountByID(int.Parse(AccountID?.ToString() ?? "0"));
                if (_UserModel == null)
                {
                    throw new Exception("Không tìm thấy tài khoản");
                }
            }
            else {
                _UserModel = new UserModel();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/users");
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                divisionId = await AuthHelper.GetDivisionIdOfUserNotAdmin();
                await OnInitData();
                //await _jsRuntime.InvokeVoidAsync("vnDatePicker");
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/users");
        }
    }

    private async Task OnSubmitForm()
    {
        isSubmitting = true;
        HttpResponseMessage response = null;

        try
        {
            _UserModel = ObjectHelper.TrimALlStringValueOfProperties(_UserModel);
            //Code
            if (String.IsNullOrEmpty(_UserModel.Code))
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Tài khoản không được để trống", "error");
                isSubmitting = false;
                return;
            }
            if (_UserModel.Code.Length > 50)
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Tài khoản tối đa 50 ký tự", "error");
                isSubmitting = false;
                return;
            }
            //FullName
            if (String.IsNullOrEmpty(_UserModel.FullName))
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Tên đầy đủ không được để trống", "error");
                isSubmitting = false;
                return;
            }
            if (_UserModel.FullName.Length > 50)
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Tên đầy đủ tối đa 50 ký tự", "error");
                isSubmitting = false;
                return;
            }
            //Password
            if (!IsUpdate)
            {
                if (String.IsNullOrEmpty(_UserModel.Password))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Mật khẩu không được để trống", "error");
                    isSubmitting = false;
                    return;
                }
                if (!isPasswordStrong(_UserModel.Password))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Mật khẩu tối thiểu 8 ký tự, có ký tự đặc biệt, chữ thường, chữ hoa và số", "error");
                    isSubmitting = false;
                    return;
                }
            }
            //Điện thoại
            if (!String.IsNullOrEmpty(_UserModel.Phone))
            {
                if (!isPhoneNumber(_UserModel.Phone))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Điện thoại không đúng định dạng", "error");
                    isSubmitting = false;
                    return;
                }
            }
            //Email
            if (!String.IsNullOrEmpty(_UserModel.Email))
            {
                if (!isEmail(_UserModel.Email))
                {
                    await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Email không đúng định dạng", "error");
                    isSubmitting = false;
                    return;
                }
            }


            if (IsUpdate)
            {
                response = await _userService.UpdateAccount(_UserModel);
            }else
            {
                response = await _userService.CreateAccount(_UserModel);
            }

            string responseBody = await response.Content.ReadAsStringAsync();
            var responseData = JsonConvert.DeserializeObject<ResponseData<Object>>(responseBody);

            if (!String.IsNullOrEmpty(responseData.ErrorCode) && responseData.ErrorCode != "0")
            {
                isSubmitting = false;
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", responseData.Message, "error");
            }
            else
            {
                isSubmitting = false;
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", responseData.Message, "success");
                await Task.Delay(2000);
                UriHelper.NavigateTo("/users", true);
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
            isSubmitting = false;
        }

        isSubmitting = false;
    }

    private void OnCancelEditing()
    {
        UriHelper.NavigateTo("/users", true);
    }
    public static bool isPasswordStrong(string password)
    {
        return Regex.Match(password, @"^(?=.{8,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?\W).*$").Success;
    }
    public static bool isPhoneNumber(string password)
    {
        return Regex.Match(password, @"^\d+$").Success;
    }
    public static bool isEmail(string email)
    {
        return Regex.Match(email, @"^[\w-\.]+@([\w-]+\.)+[\w-]{2,10}$").Success;
    }
    public static bool isCMND(string cmnd)
    {
        return Regex.Match(cmnd, @"^\d+$").Success;
    }
    private void OnChangeWareHouseCode(ChangeEventArgs evt)
    {
        WareHouseModel wareHouseModel = new WareHouseModel();
        var wareHouseCode = !String.IsNullOrEmpty(evt.Value.ToString()) ? evt.Value.ToString() : null;
        if (!String.IsNullOrWhiteSpace(wareHouseCode))
        {
            wareHouseModel = _wareHouseModels.Where(n => n.WarehouseCode.Equals(wareHouseCode)).FirstOrDefault();
            _UserModel.WarehouseCode = wareHouseModel.WarehouseCode;
            _UserModel.WarehouseName = wareHouseModel.WarehouseName;
        }
    }

}