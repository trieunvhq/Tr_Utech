@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils

@using Microsoft.AspNetCore.Http.Extensions
@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="DANH MỤC CHỈ THỊ CHUYỂN KHO" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <h4>Tìm kiếm</h4>
                    <TransferDirectiveSearchForm OnImport="@OnImport"
                                         OnSearch="@OnSearch"
                                         @bind-WareHouseCode_From="@wareHouseCode_from"
                                         @bind-WareHouseCode_To="@wareHouseCode_to"
                                         @bind-TransferNo="@transferNo"
                                         @bind-DateFrom="@dateFrom"
                                         @bind-DateTo="@dateTo"/>
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@transferDirectiveModels"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   MinColumnActionWidth="142"
                                   IndexColSize="60">
                            
                            <TableActionButton Context="item">
                                <TableCommonAction OnClickDetail="() => OnClickDetail(item)"
                                                   OnClickActualScanDetail="() => OnClickActualScanDetail(item)"
                                                   OnClickExportExcel="() => OnClickExportExcel(item)"
                                                   ShowActualScanDetail ="true"
                                                   ShowExportExcel="true"
                                                   ShowEdit="false"
                                                   ShowDelete="false" />
                            </TableActionButton>
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private string itemCode = "";
    private string exportStatus = "";
    private string transferNo = "";
    private string wareHouseCode_from = "";
    private string wareHouseCode_to = "";
    private string dateFrom = "";
    private string dateTo = "";
    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh mục chỉ thị chuyển kho", path = "/TransferDirective"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
{
        new TableLabels {label = "Số lệnh chuyển", dataIndex = "TransferOrderNo",columnWidth=150},
        new TableLabels {label = "Ngày lệnh", dataIndex = "InstructionDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Mã kho đến", dataIndex = "WarehouseCode_From",columnWidth=150 },
        new TableLabels {label = "Tên kho đến", dataIndex = "WarehouseName_From",columnWidth=150 },
        new TableLabels {label = "Mã kho đi", dataIndex = "WarehouseCode_To",columnWidth=150 },
        new TableLabels {label = "Tên kho đi", dataIndex = "WarehouseName_To",columnWidth=150 },
    };

    private bool loading = true;
    private List<TransferInstructionModel> transferDirectiveModels = new List<TransferInstructionModel>();
    private TransferDirectiveService _transferDirectiveService;

    private async Task OnSearch()
    {
        loading = true;
        CurrentPage = 1;
        await storeParamSearch();
        await OnInitData();
    }

    private async Task OnImport()
    {
        try
        {
            loading = true;
            CurrentPage = 1;
            var responseData = await _transferDirectiveService.ImportTransferDirectiveItem();
            string errCode = String.IsNullOrEmpty(responseData.ErrorCode?.Trim()) ? "0" : responseData.ErrorCode?.Trim();
            if ("0".Equals(errCode))
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Đã lấy thông tin từ hệ thống AMIS thành công", "success");
                await OnInitData();
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("showMessage", "Thông báo", "Lấy thông tin từ hệ thống AMIS thất bại", "error");

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            transferDirectiveModels = new List<TransferInstructionModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);

    }
    private async Task storeParamSearch()
    {
        dateFrom = await _jsRuntime.InvokeAsync<string>("getValByElId", "searchStartDate");
        dateTo = await _jsRuntime.InvokeAsync<string>("getValByElId", "searchEndDate");

        await _localStorageService.SetItemAsStringAsync("search_exportdirective_wareHouseCode_from", !String.IsNullOrWhiteSpace(wareHouseCode_from) ? wareHouseCode_from : "");
        await _localStorageService.SetItemAsStringAsync("search_exportdirective_wareHouseCode_to", !String.IsNullOrWhiteSpace(wareHouseCode_to) ? wareHouseCode_to : "");
        await _localStorageService.SetItemAsStringAsync("search_exportdirective_transferNo", !String.IsNullOrWhiteSpace(transferNo) ? transferNo : "");
        await _localStorageService.SetItemAsStringAsync("search_exportdirective_itemCode", !String.IsNullOrWhiteSpace(itemCode) ? itemCode : "");
        await _localStorageService.SetItemAsStringAsync("search_exportdirective_exportStatus", !String.IsNullOrWhiteSpace(exportStatus) ? exportStatus : "");

        await _localStorageService.SetItemAsStringAsync("search_exportdirective_dateFrom", !String.IsNullOrWhiteSpace(dateFrom) ? dateFrom : "");
        await _localStorageService.SetItemAsStringAsync("search_exportdirective_dateTo", !String.IsNullOrWhiteSpace(dateTo) ? dateTo : "");

        await _localStorageService.SetItemAsStringAsync("search_exportdirective_currnetPage", CurrentPage.ToString());
    }
    private async Task retryParamSearch()
    {
        wareHouseCode_from = await _localStorageService.GetItemAsStringAsync("search_exportdirective_wareHouseCode_from") ?? "";
        transferNo = await _localStorageService.GetItemAsStringAsync("search_exportdirective_transferNo") ?? "";
        itemCode = await _localStorageService.GetItemAsStringAsync("search_exportdirective_itemCode") ?? "";
        exportStatus = await _localStorageService.GetItemAsStringAsync("search_exportdirective_exportStatus") ?? "";
        dateFrom = await _localStorageService.GetItemAsStringAsync("search_exportdirective_dateFrom") ?? "";
        dateTo = await _localStorageService.GetItemAsStringAsync("search_exportdirective_dateTo") ?? "";

        var curPage = await _localStorageService.GetItemAsStringAsync("search_exportdirective_currnetPage") ?? "";
        CurrentPage = CommonUtils.ConvertStringNumberVNToInt(curPage)??1;
        if (CurrentPage <= 0) CurrentPage = 1;
    }
    protected override void OnInitialized()
    {
        try
        {
            _transferDirectiveService = new TransferDirectiveService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/TransferDirective");
        }
    }


    private async Task OnInitData()
    {
        try
        {
            await retryParamSearch();

            var glStartDate = CommonUtils.ConvertDateVNFormatedToDate(dateFrom);
            var glStrStartDate = glStartDate != null ? glStartDate.ToString() : "";
            var glEndDate = CommonUtils.ConvertDateVNFormatedToDate(dateTo);
            var glStrEndDate = glEndDate != null ? glEndDate.ToString() : "";

            var response = await _transferDirectiveService.SearchTransferDirective(CurrentPage, RowPerPage, transferNo, wareHouseCode_from, wareHouseCode_to, glStrStartDate, glStrEndDate);
            transferDirectiveModels = response.rows ?? new List<TransferInstructionModel>();
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            transferDirectiveModels = new List<TransferInstructionModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await SystemHelper.clearSearchParameter(_navigationManager, _localStorageService);
                dateFrom = await _localStorageService.GetItemAsStringAsync("search_exportdirective_dateFrom") ?? "";
                if (string.IsNullOrEmpty(dateFrom?.Trim()))
                {
                    dateFrom = CommonUtils.GetFirstDayOfThisMonth();
                    await _localStorageService.SetItemAsStringAsync("search_exportdirective_dateFrom", !String.IsNullOrWhiteSpace(dateFrom) ? dateFrom : "");
                    await _jsRuntime.InvokeAsync<string>("clearDateTimePickerByElId", "searchEndDate1");
                }
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/TransferDirective");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await OnInitData();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }

    private void OnClickDetail(TransferInstructionModel transferIns)
    {
        UriHelper.NavigateTo($"/TransferDirective/detail/{transferIns.TransferOrderNo}", true);
    }

    private void OnClickActualScanDetail(TransferInstructionModel transferIns)
    {
        UriHelper.NavigateTo($"/TransferDirective/ActualScanDetail/{transferIns.TransferOrderNo}", true);
    }

    private async void OnClickExportExcel(TransferInstructionModel transferIns)
    {
        string query = $"transferNo={transferIns.TransferOrderNo}";
        UriHelper.NavigateTo($"/TransferDirective/ViewExcelReport?{query}", true);
    }
}