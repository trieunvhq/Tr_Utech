@using QRMSWeb.Components.Common.Breadcrumb
@using QRMSWeb.Components.Common.SampleTable
@using QRMSWeb.Components.Common.TableActions
@using QRMSWeb.Services
@using QRMSWeb.Models
@using QRMSWeb.Helper
@using QRMSWeb.Utils

@using Microsoft.AspNetCore.Http.Extensions
@inject NavigationManager _navigationManager
@inject NavigationManager UriHelper
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService;

<Breadcrumb Title="CHI TIẾT CHỈ THỊ XUẤT KHO" levels="@Levels" />

<div class="page-content-wrapper">
    <div class="row">
        <div class="col-12 space_search_area">
            <div class="card">
                <div class="card-body contain_body">
                    <ExportDirectiveDetailSearchForm
                                         @bind-WarehouseName_From="@WarehouseName_From"
                                         @bind-WarehouseName_To="@WarehouseName_To"
                                         @bind-TransferStatusName="@TransferStatusName"
                                         @bind-TranferOrderNo="@_TranferOrderNo"
                                         @bind-InstructionDate="@InstructionDate"/>
                </div>
            </div>
        </div>

        <div class="col-12">
            <div class="card">
                <div class="card-body contain_body">
                    @if (loading)
                    {
                        <div class="text-center">
                            Đang tải...
                        </div>
                    }
                    else
                    {
                        <TableList data="@_exportDirectiveItemModels"
                                   TotalPage="@TotalPage"
                                   CurrentPage="@CurrentPage"
                                   OnClickPage="@OnClickPage"
                                   TableLabelsList="@labels"
                                   RowPerPage=@RowPerPage
                                   MinColumnActionWidth="142"
                                   IndexColSize="60">
                            <!--<AddButton>
                                <div class="d-flex flex-row justify-content-end">
                                    <button @onclick="OnClickAdd" type="button" class="btn btn-primary waves-effect waves-light">
                                        Thêm mới
                                    </button>
                                </div>
                            </AddButton>-->
                        </TableList>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public object TranferNo { get; set; }

    private string WarehouseName_From = "";
    private string WarehouseName_To = "";
    private string _TranferOrderNo = "";
    private string TransferStatusName = "";
    private string InstructionDate = "";
    private int TotalPage = 0;
    private int CurrentPage = 1;
    private const int RowPerPage = 10;

    private List<BreadcrumbLevel> Levels = new List<BreadcrumbLevel>()
{
        new BreadcrumbLevel() {name = "Danh mục chỉ thị xuất kho", path = "/ExportDirective"}
    };

    private List<TableLabels> labels = new List<TableLabels>()
{
        new TableLabels {label = "Ngày yêu cầu", dataIndex = "InstructionDate", dataType="date", columnWidth=110},
        new TableLabels {label = "Mã kho đến", dataIndex = "WarehouseCode_From", columnWidth=110},
        new TableLabels {label = "Tên kho đến", dataIndex = "WarehouseName_From", columnWidth=150},
        new TableLabels {label = "Mã kho đi", dataIndex = "WarehouseCode_To", columnWidth=110},
        new TableLabels {label = "Tên kho đi", dataIndex = "WarehouseName_To", columnWidth=150},
        new TableLabels {label = "Mã hàng", dataIndex = "ItemCode",columnWidth=110},
        new TableLabels {label = "Tên hàng", dataIndex = "ItemCode",columnWidth=150},
        new TableLabels {label = "Số lượng", dataIndex = "Quantity", dataType="number", columnWidth=120},
        new TableLabels {label = "Đơn vị", dataIndex = "Unit",columnWidth=80},
    };

    private bool loading = true;
    private TransferInstructionModel _exportDirectiveModel;

    private List<TransferInstructionItemModel> _exportDirectiveItemModels = new List<TransferInstructionItemModel>();
    private ExportDirectiveService _exportDirectiveService;

    private async Task OnSearch()
    {
        loading = true;
        CurrentPage = 1;
        await OnInitData();
    }
    protected override void OnInitialized()
    {
        try
        {
            Levels.Add(new BreadcrumbLevel() { name = "Chi tiết chỉ thị xuất kho", path = $"/ExportDirective/detail/{TranferNo}" });
            _exportDirectiveService = new ExportDirectiveService(_httpClient);
        }
        catch (Exception e)
        {
            _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/ExportDirective");
        }
    }


    private async Task OnInitData()
    {
        try
        {

            var response = await _exportDirectiveService.SearchExportDirectiveItem(CurrentPage, RowPerPage,
                _TranferOrderNo);
            _exportDirectiveItemModels = response.rows ?? new List<TransferInstructionItemModel>();
            TotalPage = response.pages;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            //await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "");
            _exportDirectiveItemModels = new List<TransferInstructionItemModel>();
            TotalPage = 0;
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _exportDirectiveModel = await _exportDirectiveService.GetExportDirectiveByTranferOrderNo(TranferNo.ToString());
                if (_exportDirectiveModel != null)
                {
                    WarehouseName_From = _exportDirectiveModel.WarehouseName_From;
                    WarehouseName_To = _exportDirectiveModel.WarehouseName_To;
                    _TranferOrderNo = _exportDirectiveModel.TransferOrderNo;
                    TransferStatusName = _exportDirectiveModel.TransferStatusName;
                    InstructionDate = _exportDirectiveModel.InstructionDate.ToString();
                }
                await _jsRuntime.InvokeVoidAsync("disableAutofill");
                await OnInitData();
            }
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "", "/ExportDirective");
        }
    }

    private async Task OnClickPage(int page)
    {
        try
        {
            loading = true;
            CurrentPage = page;
            await InvokeAsync(StateHasChanged);
            await OnInitData();
        }
        catch (Exception e)
        {
            await _jsRuntime.InvokeVoidAsync("handleException", e.Message, "Có lỗi xảy ra.", "");
        }
    }
}